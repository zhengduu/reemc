function out = generatePlotsv3(ds, plotsFile, autoplot, plottingFuncName, sizeColorMap, plotParams) 
%GENERATEPLOTSV3 This function reads the matDS structures and the plot configuration file and generates a
%m-function to plot the desired signals. Some parameters in the output m-function file are defined by 
%default and need to be set manually. 

%ds:                Cell array with all the matDS structures needed for plotting. This cell is defined by the 
%                   output mat structures generated with the function generateMatDS.m., i.e.
%                   ds={matDS1, matDS2, ... , matDSn};
%plotsFile:         filename+path with the plot configuration.
%autoplot:          true->after generating the m-plot function, it will execute it, visualizing and generating
%                   the plots. It will also save all the figures in *.svg format.  
%plottingFuncName:  This string is used as a prefix for the generated m-function file to plot the signals. The
%                   function name will bo constructed also with the current date.
%sizeColorMap:      int that defines the color map size. This value depends on the total number of signals to
%                   be plotted.
%plotParams:        Is a vector of doubles with [titleFontSize,labelFontSize,axesFontSize,legendFontSize]. This
%                   parameter should not be used normaly, and the default values should be used instead.

% TUM ICS
% Emmanuel Dean dean@tum.de
% Florian Bergner florian.bergner@tum.de


clc

% Get the number of arguments to check if the extra parameters have been
% defined
inVars=nargin();

% Get the size of the color map. This size depends on the number of total
% signals defined in the config file 'plots.txt'
if inVars>4
    sColorMap=sizeColorMap;
else
    % if no parameter is given then we use the defaul size
    sColorMap=16;
end

% Get extra parameters
if inVars>5
    lpP=length(plotParams);
    if lpP==4
        titleFontSize=plotParams(1);
        labelsFontSize=plotParams(2);
        axesFontSize=plotParams(3);
        legendFontSize=plotParams(4);
    else
        error('ERROR in plotParams, it must be a vector of nums size 4\n');
    end    
else
    % Set default Plot parameters
    titleFontSize=20;
    labelsFontSize=15;
    axesFontSize=15;
    legendFontSize=15;
end

% [filepath,name,ext] = fileparts(plotsFile)

% Opening the plots config file 'plots.txt'
fprintf('reading plot file: "%s" ...\n',plotsFile);
fileId = fopen(plotsFile);
if fileId == -1
    error('Plots File %s does not exist',plotsFile);
end

% Get the clock to used as postfix in the output file name
format shortg
c=clock;
[name,errmsg]=sprintf('%s_%d_%d_%d_%d_%d',plottingFuncName,c(1),c(2),c(3),c(4),c(5));
[funcName,errmsg]=sprintf('%s.m',name);

% Generate the output file. This file can be used again later for tunning
% the plots
fid=fopen(funcName,'w');
fprintf(fid,'%%This file was atutomatically generated by --generatePlotsv3--\n');
fprintf(fid,'function out=%s(ds)\n',name);
fprintf(fid,'%% %s generates the plots using the mat structures defined in\n',upper(name));
fprintf(fid,'%% cell array ds={matDS1, matDS2, matDS3}\n\n');
fprintf(fid,'dsaux=adjTime(ds);\n');
fprintf(fid,'for k=1:length(ds)\n');
fprintf(fid,'   c = dsaux{k};\n');
fprintf(fid,'   eval(strcat(c.name, ''= c;''));\n');
fprintf(fid,'end\n');

fprintf(fid,'lineWidth = {\n');
fprintf(fid,'    {''LineWidth'',0.5},...\n');
fprintf(fid,'    {''LineWidth'',1.0},...\n');
fprintf(fid,'    {''LineWidth'',2.0},...\n');
fprintf(fid,'    {''LineWidth'',2.5},...\n');
fprintf(fid,'    {''LineWidth'',3.0},...\n');
fprintf(fid,'    {''LineWidth'',3.5},...\n');
fprintf(fid,'    };\n');

fprintf(fid,'lineStyle = {\n');
fprintf(fid,'    {''LineStyle'',''-''}, ...\n');
fprintf(fid,'    {''LineStyle'',''--''}, ...\n');
fprintf(fid,'    {''LineStyle'','':''},...\n');
fprintf(fid,'    {''LineStyle'',''none''},...\n');
fprintf(fid,'};\n');

fprintf(fid,'marker = {\n');
fprintf(fid,'    {''Marker'',''none''},...\n');
fprintf(fid,'    {''Marker'',''o''},...\n');
fprintf(fid,'    {''Marker'',''+''},...\n');
fprintf(fid,'    {''Marker'',''x''}\n');
fprintf(fid,'};\n');


% Color Map used to generate different colors for all the signals
CM=jet(sColorMap);

% get the first line of the plots config file
line = fgetl(fileId);

% we initialize the id to 0 to control the first time we access this
% funciton
plots.id=0;
colorInd=1;
while line~=-1
    %% 
    % Check if the token '>' is in the first char. This indicates header
    % line
    if line(1)==">"
        
        % Write the current stored Plot config data
        % Flush all the stored data into the output plot file
        if plots.id
            
            fprintf(fid,'\n\n%%%% PLOT %d\n',plots.id);
            fprintf(fid,'figure(%d)\n',plots.id);
            fprintf(fid,'set(gcf, ''Position'', [10 10 1920 1080]); %% x,y,width,height\n');
                        
            % to control the index of xAxis and yAxis
            axisInd=1;
            % to control the index of the units cell
            unitsInd=1;
            for i=1:plots.cols*plots.rows
                fprintf(fid,'\n%%+++++++++++++++++++++++++++++++++++++++++\n');
                % write the subplot configuration
                fprintf(fid,'subplot(%d,%d,%d);\n',plots.rows,plots.cols,i);
                
                % write the legen list
                legendStr=sprintf('legendNames = {');
                
                %write the plot functions based in the info from the plot
                %configuration file 'plot.txt'
                fprintf(fid,'plot(%s,%s,''color'',[%s %s %s],lineWidth{3}{:},lineStyle{1}{:},marker{1}{:});\n',xAxis{axisInd},yAxis{axisInd},num2str(CM(colorInd,1)),num2str(CM(colorInd,2)),num2str(CM(colorInd,3)));
                legendStr=strcat(legendStr,sprintf('''%s''',yAxis{axisInd}));
                
                fprintf(fid,'hold on\n');
                axisInd=axisInd+1;
                colorInd=colorInd+1;
                for j=1:plots.nSignals(i)-1
                    fprintf(fid,'plot(%s,%s,''color'',[%s %s %s],lineWidth{3}{:},lineStyle{1}{:},marker{1}{:});\n',xAxis{axisInd},yAxis{axisInd},num2str(CM(colorInd,1)),num2str(CM(colorInd,2)),num2str(CM(colorInd,3)));
                    legendStr=strcat(legendStr,sprintf(',''%s''',yAxis{axisInd}));
                    axisInd=axisInd+1;
                    colorInd=colorInd+1;
                end
                
                legendStr=strcat(legendStr,'};');
                
                % Write Plot configurations (Axes, legends, titles)
                fprintf(fid,'%% ------------------------------>\n');
                fprintf(fid,'%% ------------------------------>\n');
                fprintf(fid,'%s\n',legendStr);
                
                fprintf(fid,'%% <------------------------------\n');
                fprintf(fid,'%% <------------------------------\n');
                fprintf(fid,'set(gca,''TickLabelInterpreter'', ''latex'');\n');
                fprintf(fid,'set(gca,''FontSize'',%d);\n',axesFontSize);
                     
                fprintf(fid,'%%xlim([upper_limit,lower_limt]);\n');
                fprintf(fid,'xl = xlabel(''t [s]'');\n');
                fprintf(fid,'set(xl,''Interpreter'',''latex'');\n');
                fprintf(fid,'set(xl,''FontSize'',%d);\n',labelsFontSize);
                
                % We need to substract 1 to the axisInd in order to keep
                % the same arrangement for xAxis, yAxis and zAxis                                
                % If the plot config file has a 3rd Axis the we plot first
                % the left Y-axis ...
                if zAxisFlag{axisInd-1}
                    fprintf(fid,'yyaxis left\n');
                end
                fprintf(fid,'%%ylim([upper_limit,lower_limt]);\n');
                fprintf(fid,'yl = ylabel(''%s'');\n',plots.units{unitsInd});
                unitsInd=unitsInd+1;
                fprintf(fid,'set(yl,''Interpreter'',''latex'');\n');
                fprintf(fid,'set(yl,''FontSize'',%d);\n',labelsFontSize);
                fprintf(fid,'set(gca,''YColor'',[31 120 180]./255);\n');
                
                % ... after that, we plot the right Y-axis
                if zAxisFlag{axisInd-1}
                    fprintf(fid,'yyaxis right\n');
                    fprintf(fid,'%%ylim([upper_limit,lower_limt]);\n');
                    fprintf(fid,'yl = ylabel(''%s'');\n',plots.units{unitsInd});
                    unitsInd=unitsInd+1;
                    fprintf(fid,'set(yl,''Interpreter'',''latex'');\n');
                    fprintf(fid,'set(yl,''FontSize'',%d);\n',labelsFontSize);
                    fprintf(fid,'set(gca,''YColor'',[227 26 28]./255);\n');
                end

                
                % Writing the legen configurations
                fprintf(fid,'l = legend(legendNames);\n');
                fprintf(fid,'set(l,''Location'',''best'');\n');
                fprintf(fid,'set(l,''Interpreter'',''latex'');\n');
                fprintf(fid,'set(l,''FontSize'',%d);\n',legendFontSize);                
                
                % Activating grid in all the plots
                fprintf(fid,'grid on\n');
                
                % writing the title parameters
                fprintf(fid,'yl = title(''%s'');\n',plots.titles{i});
                fprintf(fid,'set(yl,''Interpreter'',''latex'');\n');
                fprintf(fid,'set(yl,''FontSize'',%d);\n',titleFontSize);
    
            end%for rows*cols
            
            % writing the instruction to generate the svg files.
            fprintf(fid,'set(gcf,''renderer'',''Painters'');\n');
            fprintf(fid,'print(gcf,''%s_%d'',''-dsvg'');\n',plots.figName{1},plots.id);
            
            plots.nSignals=[];
            
        end%if id
        
        % Get the last character of the first line (starting with >) as the
        % plot Id
        len=length(line);
        % The plot config file 'plots.txt' should have in the plot header
        % config (defined by '>'), the plot id at the end of the line
        plots.id=str2num(line(len));
        
        % Get text between the brackets. The plot header in the plot config
        % file 'plots.txt'should have:
        % {Subplot_title_1} (signal_name_1 [signal_units_1]),..., 
        % {Subplot_title_n} (signal_name_n [signal_units_n]) plot_number
        % The signals names and units define the signal type and units for
        % the y-axis (left and right). We assume that x-axis is always
        % (time [s])
        plots.titles=extractBetween(line,'{','}');
        units=extractBetween(line,'(',')');
        plots.figName=extractBetween(line,'*','*');
        
        lu=length(units);
        
        % The units most be handled in a different way, because one plot
        % can have one title, but multiple signals --In the case of double
        % y-axes (left and right).
        %this variable counts the number of total signals in a subplot
        unitsInd=1;
        for i=1:lu
            % we use ',' as a delimiter in the signals names
            k2=textscan(units{i},'%s','Delimiter',',');
            lk=length(k2{:});
            
            % if the singals have a ',' it means that we have a plot with
            % y-axis left and right
            if lk>1
                % Then we need to add the extra signals to the cell array
                for j=1:lk
                    plots.units{unitsInd}=k2{1}{j};
                    unitsInd=unitsInd+1;
                end
            else
                % if the delimiter is not present then we just simply copy
                % the signal from the original cell.
                plots.units{unitsInd}=units{i};
                unitsInd=unitsInd+1;
            end
        end
        
        % Get a new line
        line = fgetl(fileId);
        
        % Set the default variables to zero in order to generate the data
        % for the new subplot
        plots.rows=0;
        plots.cols=0;
        xAxis={};
        yAxis={};
        zAxis={};
        zAxisFlag={};
        
        %This variable define the index of the number of signals per
        %subplot
        nSignalIdx=1;
        continue
    end%if line >
    %%
    
    % The subplots columns are delimited with ':'.
    % we need to exctract each element delimited by it.
    % this function will create a cell array of 1XNumber_of_elements
    aux = textscan(line,'%s','Delimiter',':');
    sa=size(aux{:});
    % the number of columns for the subplot is the number of elements
    % delimited by ':'
    plots.cols=sa(1);
    
    for i=1:plots.cols
        % Now, we need to separate all the subplots
        sepPlot=aux{1}{i};
        
        % The signals of a subplot are separated by ','. In this plot
        % generation function, we consider that the x-axis is always the
        % time!!!
        aux2=textscan(sepPlot,'%s','Delimiter',',');
        
        laux2=length(aux2{:});

        % The number of signals to be plotted will be the number of
        % signals_names in the subplot config file 'plots.txt' divide by 
        % two. Each signal is defined by a y-axis and x-axis.
        plots.nSignals(nSignalIdx)=laux2/2;
     
        % Now, we analyze each signal_name in pairs.
        for j=2:2:laux2
            
            % The signals_names of each subplot are separated by ',', in
            % the case of plots with a y-axis right, a new signal_name is
            % required. In this case it will be defined by ';'
            aux3=textscan(aux2{1}{j},'%s','Delimiter',';');
            
            % If the number of elements is more than one, it means that a
            % ';' was found in the str, which means that the plot has a
            % y-axis right
            laux3=length(aux3{:});
            
            if laux3>1
                xAxis={xAxis{1:end},aux3{1}{1}};
                % We create a zAxis to contain the y-axis right elements.
                % If the right y-axis is defined, then the name of the
                % signal is saved and its corresponding flag will be set to
                % 'true', otherwise an empty str will be saved with a false
                % flag.
                zAxis={zAxis{1:end},aux3{1}{2}};
                zAxisFlag={zAxisFlag{1:end},true};
            else
                % No right y-axis case
                xAxis={xAxis{1:end},aux2{1}{j}};
                zAxisFlag={zAxisFlag{1:end},false};
                zAxis={zAxis{1:end},''};
            end
            
            % We define the y-axes
            yAxis={yAxis{1:end},aux2{1}{j-1}};
        end

        nSignalIdx=nSignalIdx+1;

    end
    
    % with each new line in the plot config file 'plots.txt' 
    % (not starting with '>') we will define a new row
    % for the subplots.
    plots.rows=plots.rows+1;
    
    % Get the new line
    line = fgetl(fileId);
end

% Close the plot config file 'plot.txt'
fclose(fileId);

%out must be used otherwise the funct feval will trigger an error
fprintf(fid,'\nout=1;\n');
fprintf(fid,'end\n');

% Close the output file (plotting file)
fclose(fid);

% If auto plot is defined then this plot generation function will execute
% the recently generated plot file (output file)
if autoplot
    fprintf(1,'Generating the plots -- %s -- is been executed\n',name);
    Ex=feval(name,ds);
end

out=1;

end%funct
